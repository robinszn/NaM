
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.view.Viewer;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Zach
 */
public class main extends javax.swing.JFrame {
 
    ArrayList<String> list = new ArrayList<String>();
    MultiGraph graph = new MultiGraph("Network Map");
    String Commands = "";
    
    
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblScanType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReports = new javax.swing.JTextArea();
        btnGetNetworkDevices = new javax.swing.JButton();
        btnGenerateGraph = new javax.swing.JButton();
        txtIPAddress = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        cmbScans = new javax.swing.JComboBox();
        btnBrowse = new javax.swing.JButton();
        btnAddIP = new javax.swing.JButton();
        cmbOutputType = new javax.swing.JComboBox();
        lblScanning = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCommands = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblScanInfo = new javax.swing.JLabel();
        lblEstTime = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnGetPorts = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaPorts = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaReports = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnBrowseReports = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 367, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Network Asset Manager BETA");
        setPreferredSize(new java.awt.Dimension(850, 850));

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel3.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Network Asset Manager");
        jLabel1.setToolTipText("");

        lblScanType.setText("Enter IP Address:");
        lblScanType.setToolTipText("");

        txtReports.setEditable(false);
        txtReports.setColumns(20);
        txtReports.setRows(5);
        txtReports.setName("txtReports"); // NOI18N
        jScrollPane1.setViewportView(txtReports);

        btnGetNetworkDevices.setText("Get Network Devices");
        btnGetNetworkDevices.setName("btnAction"); // NOI18N
        btnGetNetworkDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetNetworkDevicesActionPerformed(evt);
            }
        });

        btnGenerateGraph.setText("Generate Network Graph");
        btnGenerateGraph.setEnabled(false);
        btnGenerateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateGraphActionPerformed(evt);
            }
        });

        txtIPAddress.setName("txtAddress"); // NOI18N
        txtIPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPAddressActionPerformed(evt);
            }
        });

        btnClear.setText("Clear Report");
        btnClear.setName(""); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        cmbScans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple Scan", "OS Detection Scan", "Heavy Scan", "Scan from File", "None" }));
        cmbScans.setSelectedIndex(4);
        cmbScans.setToolTipText("");
        cmbScans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbScansActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse");
        btnBrowse.setEnabled(false);
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnAddIP.setLabel("Add IP");
        btnAddIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddIPActionPerformed(evt);
            }
        });

        cmbOutputType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Text File", "XML File" }));
        cmbOutputType.setName(""); // NOI18N
        cmbOutputType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOutputTypeActionPerformed(evt);
            }
        });

        lblScanning.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/512_pixels/256_pixels/5_White_logo_on_black_256.jpg"))); // NOI18N

        jLabel4.setText("Commands:");

        jLabel5.setText("Output:");

        jLabel6.setText("Scan Type:");

        jLabel12.setText("Scan Info:");

        lblScanInfo.setText("No Scan Selected");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(btnGetNetworkDevices, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(btnGenerateGraph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblScanType)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel12))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(cmbScans, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnBrowse))
                                            .addComponent(cmbOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblScanInfo)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtIPAddress)
                                                    .addComponent(txtCommands, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnAddIP))
                                            .addComponent(lblEstTime))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblScanning)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddIP)
                            .addComponent(lblScanType, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbScans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(btnBrowse))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(lblScanInfo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEstTime))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(lblScanning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetNetworkDevices)
                    .addComponent(btnClear)
                    .addComponent(btnGenerateGraph))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Enter IP Address", jPanel3);

        btnGetPorts.setText("Get Open Ports");
        btnGetPorts.setName("btnMap"); // NOI18N
        btnGetPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetPortsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Open ports are the doorways to your secure perimeter. Using the NMap API, NaM can be used as a network mapping utility ");
        jLabel3.setAutoscrolls(true);
        jLabel3.setName(""); // NOI18N

        txtAreaPorts.setEditable(false);
        txtAreaPorts.setColumns(20);
        txtAreaPorts.setRows(5);
        jScrollPane2.setViewportView(txtAreaPorts);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("that can be used to identify open \"doors\". By click the button below, open ports for the requested IP can be shown to ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("identifiy any open ports on a particular network. (Est. time 10 seconds per IP)");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("NaM Open Port Finder");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAddress))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(btnGetPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetPorts)
                .addGap(18, 18, 18))
        );

        lblAddress.getAccessibleContext().setAccessibleName("lblAddress");

        jTabbedPane1.addTab("Request Open Ports", jPanel4);

        txtAreaReports.setEditable(false);
        txtAreaReports.setColumns(20);
        txtAreaReports.setRows(5);
        jScrollPane3.setViewportView(txtAreaReports);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Lists all possible other information from the most recent scan including Operating System, Open Ports, Host Authentification");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Information, Traceroute, etc. (Best used after running a \"Heavy Scan\")");

        btnBrowseReports.setText("Browse");
        btnBrowseReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBrowseReports)
                .addGap(45, 45, 45))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrowseReports)
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Vulnerability Scanner", jPanel5);

        jMenu1.setText("File");

        jMenuOpen.setText("Open");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpen);

        jMenuSave.setText("Save As");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuExit.setText("Exit");
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("jMenuItem1");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tools");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("JTree");

        setSize(new java.awt.Dimension(855, 788));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
       File file = new File("Output.txt");
        FileWriter fw = null;
        try {
            fw = new FileWriter(file, true);
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            txtAreaReports.write(fw);
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Save a File");
        fc.setSelectedFile(file);
        fc.showSaveDialog(null);
        
        
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        //txtAreaReports.setText(fileName);
        
         try
                {
                    FileReader reader = new FileReader(fileName);
                    BufferedReader br = new BufferedReader(reader);
                    txtAreaReports.read( br, null );
                    br.close();
                    txtAreaReports.requestFocus();
                }
                catch(Exception e2) { System.out.println(e2); }
            {
            }
        
        
        
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void btnGenerateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateGraphActionPerformed
          graph.clear();
            
           for(String address : list)
            {
            graph.addNode(address);
            }
            for (int i = 0; i < graph.getNodeCount(); i++) {
               Node node1 = graph.getNode(i);
                if (i > 0) {

                Node node2 = graph.getNode(i-1);
                Node firstNode = graph.getNode(0);
                Node connectNode = graph.getNode(i/2);
                
                graph.addEdge((i+"a"), node1, node2);
                graph.addEdge((i+"b"), node1, firstNode);
                graph.addEdge((i+"c"), node1, connectNode);
               }
            } 
                for (Node node : graph) {
        node.addAttribute("ui.label", node.getId());
    }
                graph.display().setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
    }//GEN-LAST:event_btnGenerateGraphActionPerformed

    private void cmbOutputTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOutputTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOutputTypeActionPerformed

    private void btnAddIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddIPActionPerformed

        String text = txtIPAddress.getText();
        list.add(text);

        txtReports.append(list.toString());
        txtReports.append("\n");

        txtIPAddress.setText("");
        

    }//GEN-LAST:event_btnAddIPActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);

        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        txtIPAddress.setText(fileName);

    }//GEN-LAST:event_btnBrowseActionPerformed

    private void cmbScansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbScansActionPerformed
        if(cmbScans.getSelectedIndex() == 0)
        {
            lblScanType.setText("Enter IP Address: ");
            cmbOutputType.setEnabled(true);
            btnBrowse.setEnabled(false);
            lblScanInfo.setText("Standard Scan that will show whether the host is online.");
            lblEstTime.setText("Est. Time 2 sec per IP.");
        }
        if(cmbScans.getSelectedIndex() == 1)
        {
            lblScanType.setText("Enter IP Address: ");
            cmbOutputType.setEnabled(true);
            btnBrowse.setEnabled(false);
            lblScanInfo.setText("Detects the OS of the host.");
            lblEstTime.setText("Est. Time 12 seconds per IP.");
        }
        if(cmbScans.getSelectedIndex() == 2)
        {
            lblScanType.setText("Enter IP Address: ");
            cmbOutputType.setEnabled(true);
            btnBrowse.setEnabled(false);
            lblScanInfo.setText("Detects all possible info(OS, Traceroute, Host Info, Open Ports, etc).");
            lblEstTime.setText("Est. Time 2 mins per IP.(Recommended 1 at a time).");
        }
        if(cmbScans.getSelectedIndex() == 3)
        {
            lblScanType.setText("Enter File Name: ");
            cmbOutputType.setEnabled(false);
            btnBrowse.setEnabled(true); 
            lblScanInfo.setText("Scans IP's from a txt file with a basic scan. ");
            lblEstTime.setText("Est. Time 2 seconds per IP.");
        }
        if(cmbScans.getSelectedIndex() == 4)
        {
           lblScanInfo.setText("No Scan Selected.");
           lblEstTime.setText("");
        }
        

    }//GEN-LAST:event_cmbScansActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtReports.setText((""));
        txtIPAddress.setText("");
        txtAreaReports.setText(" ");
        list.clear();
        graph.clear();
        btnBrowse.setEnabled(false);
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnGetNetworkDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetNetworkDevicesActionPerformed
        
        lblScanning.setText("Scan Complete!");
        
        if(cmbScans.getSelectedIndex() == 4)
        {
            Commands = ("nmap " + txtCommands.getText() + " ");
            txtReports.append("Please enter an IP." + "\n");
            txtReports.append("Please select scan type or Enter commands" + "\n"); 
        }
        else
        {
        
        String IPAddress = txtIPAddress.getText();
        lblAddress.setText(IPAddress);
        ArrayList Results = getIPAddressList();
        btnGenerateGraph.setEnabled(true);
        txtReports.append(Results.toString());
        graph.clear();
        try
        {
            if(cmbScans.getSelectedIndex() == 0 || cmbScans.getSelectedIndex() == 1 || cmbScans.getSelectedIndex() == 2 || cmbScans.getSelectedIndex() == 3)
            {
                if(cmbOutputType.getSelectedIndex() == 0)
                {
                FileReader reader = new FileReader("outputfile.txt");
                BufferedReader br = new BufferedReader(reader);
                txtAreaReports.read(br, null);
                br.close();
                txtAreaReports.requestFocus();
                }
                else if(cmbOutputType.getSelectedIndex() == 1)
                {
                FileReader reader = new FileReader("outputfile.xml");
                BufferedReader br = new BufferedReader(reader);
                txtAreaReports.read(br, null);
                br.close();
                txtAreaReports.requestFocus();
                }
            }
            else if(cmbScans.getSelectedIndex() == 4)
            {
            txtAreaReports.setText(" ");
            }
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        }
    }//GEN-LAST:event_btnGetNetworkDevicesActionPerformed

    private void btnGetPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetPortsActionPerformed
    ArrayList Ports = getPortList();
    txtAreaPorts.append(Ports.toString());

    }//GEN-LAST:event_btnGetPortsActionPerformed

    private void txtIPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPAddressActionPerformed
//       if(evt.getKeyCode() == KeyEvent.VK_ENTER)
//       {
//           
//       }
        
    }//GEN-LAST:event_txtIPAddressActionPerformed

    private void btnBrowseReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseReportsActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        //txtAreaReports.setText(fileName);
        
         try
                {
                    FileReader reader = new FileReader(fileName);
                    BufferedReader br = new BufferedReader(reader);
                    txtAreaReports.read( br, null );
                    br.close();
                    txtAreaReports.requestFocus();
                }
                catch(Exception e2) { System.out.println(e2); }
            {
            }
    }//GEN-LAST:event_btnBrowseReportsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddIP;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnBrowseReports;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnGenerateGraph;
    private javax.swing.JButton btnGetNetworkDevices;
    private javax.swing.JButton btnGetPorts;
    private javax.swing.JComboBox cmbOutputType;
    private javax.swing.JComboBox cmbScans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblEstTime;
    private javax.swing.JLabel lblScanInfo;
    private javax.swing.JLabel lblScanType;
    private javax.swing.JLabel lblScanning;
    private javax.swing.JTextArea txtAreaPorts;
    private javax.swing.JTextArea txtAreaReports;
    private javax.swing.JTextField txtCommands;
    private javax.swing.JTextField txtIPAddress;
    private javax.swing.JTextArea txtReports;
    // End of variables declaration//GEN-END:variables

 public ArrayList<String> getIPAddressList(){
    String IPAddress = txtIPAddress.getText();
    Commands = "";
    ArrayList<String> addresses = new ArrayList<String>();

    for(String address : list)
    {
    try {
        if(btnAddIP.action(null, this))
        { 
        }
        if(cmbScans.getSelectedIndex() == 4)
        {
            Commands = ("nmap " + txtCommands.getText() + " ");
            
        }
        if(cmbScans.getSelectedIndex() == 0)
        {
            
            Commands = "nmap -sn -oN outputfile.txt -oX outputfile.xml ";  
           
        }
        if(cmbScans.getSelectedIndex() == 1)
        {   
            
            Commands = "nmap -O -oN outputfile.txt -oX outputfile.xml ";
           
        }
        if(cmbScans.getSelectedIndex() == 2)
        {
          
         Commands = "nmap -T4 -A -v -oN outputfile.txt -oX outputfile.xml ";
           
        }
        else if(cmbScans.getSelectedIndex() == 3)
        {
         list.add(IPAddress);
         Commands = "nmap -iL ";
        }
        
        
        Runtime rt = Runtime.getRuntime();
        Process pr = rt.exec(Commands + address);
        BufferedReader input = new BufferedReader(
        new InputStreamReader(pr.getInputStream()));
        String line = null;
        while((line=input.readLine()) != null) {
            System.out.println(line);
            txtReports.append(line + "\n");
            if (line.contains("Nmap scan report for")){
                String[] elements = line.split(" ");
                int end = elements.length-1;
                String ip_address = elements[end];
                String line2 = input.readLine();
                if (line2.contains("Host is up")){
                    addresses.add(ip_address);
                }
            }
        }

        int exitVal = pr.waitFor();
        txtAreaReports.append("Exited with error code "+exitVal);
        System.out.println("Exited with error code "+exitVal);
    }
    catch(Exception e){
        e.printStackTrace();
        System.exit(0);
    }
    }
    return addresses;
}
 public ArrayList<String> getPortList(){
        ArrayList<String> ports = new ArrayList<String>();
        Commands = "nmap -sS ";
    
     
    for(String address : list)
    {
    try {
    
        Runtime rt = Runtime.getRuntime();
        Process pr = rt.exec(Commands + address);
        //Process pr = rt.exec(Commands + address);
        BufferedReader input = new BufferedReader(
        new InputStreamReader(pr.getInputStream()));
        String line = null;
        while((line=input.readLine()) != null) {
            System.out.println(line);
            txtAreaPorts.append(line + "\n");
            if (line.contains("Nmap scan report for")){
                String[] elements = line.split(" ");
                int end = elements.length-1;
                String ip_address = elements[end];
                String line2 = input.readLine();   
            }
        }

        int exitVal = pr.waitFor();
        txtAreaPorts.append("Exited with error code "+exitVal);
        System.out.println("Exited with error code "+exitVal);
    }
    catch(Exception e){
        e.printStackTrace();
        System.exit(0);
    }
    }
    return ports;
 
 }
 
}

